// Code generated by mockery v2.45.0. DO NOT EDIT.

package entities

import (
	context "context"

	entities "github.com/ariefsn/intrans/entities"
	mock "github.com/stretchr/testify/mock"
)

// TransactionRepositoryMock is an autogenerated mock type for the TransactionRepository type
type TransactionRepositoryMock struct {
	mock.Mock
}

type TransactionRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepositoryMock) EXPECT() *TransactionRepositoryMock_Expecter {
	return &TransactionRepositoryMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *TransactionRepositoryMock) Create(ctx context.Context, input entities.TransactionCreatePayload) (*entities.TransactionModel, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.TransactionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.TransactionCreatePayload) (*entities.TransactionModel, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.TransactionCreatePayload) *entities.TransactionModel); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TransactionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.TransactionCreatePayload) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepositoryMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TransactionRepositoryMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input entities.TransactionCreatePayload
func (_e *TransactionRepositoryMock_Expecter) Create(ctx interface{}, input interface{}) *TransactionRepositoryMock_Create_Call {
	return &TransactionRepositoryMock_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *TransactionRepositoryMock_Create_Call) Run(run func(ctx context.Context, input entities.TransactionCreatePayload)) *TransactionRepositoryMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entities.TransactionCreatePayload))
	})
	return _c
}

func (_c *TransactionRepositoryMock_Create_Call) Return(_a0 *entities.TransactionModel, _a1 error) *TransactionRepositoryMock_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepositoryMock_Create_Call) RunAndReturn(run func(context.Context, entities.TransactionCreatePayload) (*entities.TransactionModel, error)) *TransactionRepositoryMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TransactionRepositoryMock) GetByID(ctx context.Context, id string) (*entities.TransactionModel, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.TransactionModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.TransactionModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.TransactionModel); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.TransactionModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepositoryMock_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type TransactionRepositoryMock_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TransactionRepositoryMock_Expecter) GetByID(ctx interface{}, id interface{}) *TransactionRepositoryMock_GetByID_Call {
	return &TransactionRepositoryMock_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *TransactionRepositoryMock_GetByID_Call) Run(run func(ctx context.Context, id string)) *TransactionRepositoryMock_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TransactionRepositoryMock_GetByID_Call) Return(_a0 *entities.TransactionModel, _a1 error) *TransactionRepositoryMock_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepositoryMock_GetByID_Call) RunAndReturn(run func(context.Context, string) (*entities.TransactionModel, error)) *TransactionRepositoryMock_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepositoryMock creates a new instance of TransactionRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepositoryMock {
	mock := &TransactionRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
